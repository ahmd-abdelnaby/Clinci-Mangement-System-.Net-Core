#pragma checksum "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "62ee75a98d7b076323a6be4065c6ff1b3237bf0a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Appointments_Calendar), @"mvc.1.0.view", @"/Views/Appointments/Calendar.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\_ViewImports.cshtml"
using Clinic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
using Clinic.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"62ee75a98d7b076323a6be4065c6ff1b3237bf0a", @"/Views/Appointments/Calendar.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"33c2da54e0dbda0b308875a4238eef1bbe5ef84c", @"/Views/_ViewImports.cshtml")]
    public class Views_Appointments_Calendar : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Clinic.Models.Appointment>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("AppDate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("AppType"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("AppPresc"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
  
    ViewData["Title"] = "Home Page";
    List<Patient> patients = ViewBag.Patients;
    var Patients = new SelectList(patients, "ID", "Name");

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a7089", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\">\r\n    <title>Calendar</title>\r\n    <meta name=\"description\" content=\"Calendar\">\r\n    <meta name=\"author\" content=\"Charles Anderson\">\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a8293", async() => {
                WriteLiteral(@"
    <div class=""content"">
        <div class=""calendar-container"">
            <div class=""calendar"">
                <div class=""year-header"">
                    <span class=""left-button"" id=""prev""> &lang; </span>
                    <span class=""year"" id=""label""></span>
                    <span class=""right-button"" id=""next""> &rang; </span>
                </div>
                <table class=""months-table"">
                    <tbody>
                        <tr class=""months-row"">
                            <td class=""month"">Jan</td>
                            <td class=""month"">Feb</td>
                            <td class=""month"">Mar</td>
                            <td class=""month"">Apr</td>
                            <td class=""month"">May</td>
                            <td class=""month"">Jun</td>
                            <td class=""month"">Jul</td>
                            <td class=""month"">Aug</td>
                            <td class=""month"">Sep</td>
                ");
                WriteLiteral(@"            <td class=""month"">Oct</td>
                            <td class=""month"">Nov</td>
                            <td class=""month"">Dec</td>
                        </tr>
                    </tbody>
                </table>

                <table class=""days-table"">
                    <td class=""day"">Sun</td>
                    <td class=""day"">Mon</td>
                    <td class=""day"">Tue</td>
                    <td class=""day"">Wed</td>
                    <td class=""day"">Thu</td>
                    <td class=""day"">Fri</td>
                    <td class=""day"">Sat</td>
                </table>
                <div class=""frame"">
                    <table class=""dates-table"">
                        <tbody class=""tbody"">
                        </tbody>
                    </table>
                </div>
                <button class=""button"" id=""add-button"">Add Appointment</button>
            </div>
        </div>
        <div class=""events-container"">
        </div");
                WriteLiteral(">\r\n        <div class=\"dialog\" id=\"dialog\">\r\n            <h2 class=\"dialog-header\"> Add New Appointment </h2>\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a10878", async() => {
                    WriteLiteral("\r\n                <div class=\"form-container\" align=\"center\">\r\n                    <label class=\"form-label\" id=\"valueFromMyButton\" for=\"name\">Patient name</label>\r\n");
                    WriteLiteral("                    ");
#nullable restore
#line 74 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
               Write(Html.DropDownList("PatientID", Patients, new { @class = "form-control",@id= "PatientID" }));

#line default
#line hidden
#nullable disable
                    WriteLiteral("\r\n                    <label class=\"form-label\" id=\"valueFromMyButton\" for=\"count\">Appointment Type</label>\r\n");
                    WriteLiteral("                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a11870", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#nullable restore
#line 77 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Date);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    BeginWriteTagHelperAttribute();
                    __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                    __tagHelperExecutionContext.AddHtmlAttribute("hidden", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a13941", async() => {
                        WriteLiteral("\r\n                        ");
                        __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a14242", async() => {
                            WriteLiteral("Examination");
                        }
                        );
                        __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                        __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                        __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                        __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                        __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                        await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                        if (!__tagHelperExecutionContext.Output.IsContentModified)
                        {
                            await __tagHelperExecutionContext.SetOutputContentAsync();
                        }
                        Write(__tagHelperExecutionContext.Output);
                        __tagHelperExecutionContext = __tagHelperScopeManager.End();
                        WriteLiteral("\r\n                        ");
                        __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a15718", async() => {
                            WriteLiteral("consultation");
                        }
                        );
                        __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                        __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                        __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                        __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                        __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                        await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                        if (!__tagHelperExecutionContext.Output.IsContentModified)
                        {
                            await __tagHelperExecutionContext.SetOutputContentAsync();
                        }
                        Write(__tagHelperExecutionContext.Output);
                        __tagHelperExecutionContext = __tagHelperScopeManager.End();
                        WriteLiteral("\r\n                    ");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 78 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Type);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                    <label class=\"form-label\">Prescription</label>\r\n                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "62ee75a98d7b076323a6be4065c6ff1b3237bf0a18783", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#nullable restore
#line 83 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Prescription);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                    <br />\r\n                    <input type=\"button\" value=\"Cancel\" class=\"button\" id=\"cancel-button\">\r\n                    <input type=\"button\" value=\"OK\" class=\"button\" id=\"ok-button\">\r\n                </div>\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n        </div>\r\n    </div>\r\n    <!-- Dialog Box-->\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var dday;
        var mmonth;
        var yyear;
        // Setup the calendar with the current date
        $(document).ready(function () {
            getAllAppointments();
            var date = new Date();
            var today = date.getDate();
            // Set click handlers for DOM elements
            $("".right-button"").click({ date: date }, next_year);
            $("".left-button"").click({ date: date }, prev_year);
            $("".month"").click({ date: date }, month_click);
            $(""#add-button"").click({ date: date }, new_event);
            // Set current month as active
            $("".months-row"").children().eq(date.getMonth()).addClass(""active-month"");
            init_calendar(date);
            var events = check_events(today, date.getMonth() + 1, date.getFullYear());
            show_events(events, months[date.getMonth()], today);
        });

        // Initialize the calendar by appending the HTML dates
        function init_calendar(date)");
                WriteLiteral(@" {
            $("".tbody"").empty();
            $("".events-container"").empty();
            var calendar_days = $("".tbody"");
            var month = date.getMonth();
            var year = date.getFullYear();
            var day_count = days_in_month(month, year);
            var row = $(""<tr class='table-row'></tr>"");
            var today = date.getDate();
            // Set date to 1 to find the first day of the month
            date.setDate(1);
            var first_day = date.getDay();
            // 35+firstDay is the number of date elements to be added to the dates table
            // 35 is from (7 days in a week) * (up to 5 rows of dates in a month)
            for (var i = 0; i < 35 + first_day; i++) {
                // Since some of the elements will be blank,
                // need to calculate actual date from index
                var day = i - first_day + 1;
                // If it is a sunday, make a new row
                if (i % 7 === 0) {
                    calenda");
                WriteLiteral(@"r_days.append(row);
                    row = $(""<tr class='table-row'></tr>"");
                }
                // if current index isn't a day in this month, make it blank
                if (i < first_day || day > day_count) {
                    var curr_date = $(""<td class='table-date nil'>"" + ""</td>"");
                    row.append(curr_date);
                }
                else {
                    var curr_date = $(""<td class='table-date'>"" + day + ""</td>"");
                    var events = check_events(day, month + 1, year);
                    if (today === day && $("".active-date"").length === 0) {
                        curr_date.addClass(""active-date"");
                        show_events(events, months[month], day);
                    }
                    // If this date has any events, style it with .event-date
                    if (events.length !== 0) {
                        curr_date.addClass(""event-date"");
                    }
                    // Set onClic");
                WriteLiteral(@"k handler for clicking a date
                    curr_date.click({ events: events, month: months[month], day: day }, date_click);
                    row.append(curr_date);
                }
            }
            // Append the last row and set the current year
            calendar_days.append(row);
            $("".year"").text(year);
        }

        // Get the number of days in a given month/year
        function days_in_month(month, year) {
            var monthStart = new Date(year, month, 1);
            var monthEnd = new Date(year, month + 1, 1);
            return (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
        }

        // Event handler for when a date is clicked
        function date_click(event) {
            dday = event.data.day;
            mmonth = event.data.month;
            yyear = $("".year"").html();
            getAppointment(event.data.month, event.data.day);
            $("".events-container"").show(250);
            $(""#dialog"").hide(250);
         ");
                WriteLiteral(@"   $("".active-date"").removeClass(""active-date"");
            $(this).addClass(""active-date"");
            show_events(event.data.events, event.data.month, event.data.day);
        };

        // Event handler for when a month is clicked
        function month_click(event) {
            $("".events-container"").show(250);
            $(""#dialog"").hide(250);
            var date = event.data.date;
            $("".active-month"").removeClass(""active-month"");
            $(this).addClass(""active-month"");
            var new_month = $("".month"").index(this);
            date.setMonth(new_month);
            init_calendar(date);
        }

        // Event handler for when the year right-button is clicked
        function next_year(event) {
            $(""#dialog"").hide(250);
            var date = event.data.date;
            var new_year = date.getFullYear() + 1;
            $(""year"").html(new_year);
            date.setFullYear(new_year);
            init_calendar(date);
        }

       ");
                WriteLiteral(@" // Event handler for when the year left-button is clicked
        function prev_year(event) {
            $(""#dialog"").hide(250);
            var date = event.data.date;
            var new_year = date.getFullYear() - 1;
            $(""year"").html(new_year);
            date.setFullYear(new_year);
            init_calendar(date);
        }

        // Event handler for clicking the new event button
        function new_event(event) {
            // if a date isn't selected then do nothing
            if ($("".active-date"").length === 0)
                return;
            // remove red error input on click
            $(""input"").click(function () {
                $(this).removeClass(""error-input"");
            })
            // empty inputs and hide events
            $(""#dialog input[type=text]"").val('');
            $(""#dialog input[type=number]"").val('');
            $("".events-container"").hide(250);
            $(""#dialog"").show(250);
            // Event handler for cancel button");
                WriteLiteral(@"
            $(""#cancel-button"").click(function () {
                $(""#name"").removeClass(""error-input"");
                $(""#count"").removeClass(""error-input"");
                $(""#dialog"").hide(250);
                $("".events-container"").show(250);
            });
            // Event handler for ok button
            $(""#ok-button"").unbind().click({ date: event.data.date }, function () {
                event.preventDefault();
                var date = event.data.date;
                //var name = $(""#name"").val().trim();
                //var count = parseInt($(""#count"").val().trim());
                //var day = parseInt($("".active-date"").html());

                var PatientID = $('#PatientID').val();
                var type = $('#AppType').val();
                var presc = $('#AppPresc').val();
                console.log(date);
                console.log(PatientID);
                console.log(type);
                console.log(presc);

                var h = { PatientID");
                WriteLiteral(": PatientID, Type: type, Prescription: presc, month: mmonth, day: dday, year: yyear }\r\n\r\n                $.ajax({\r\n                    url: \"");
#nullable restore
#line 264 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
                     Write(Url.Action("CreateJson", "Appointments"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                    type: ""POST"",

                dataType:""json"",
                data: h,
                    success: function (result) { console.log(result) },
                error: function (err) { console.log(err); $(""#body"").html(err.responseText) }

                });

                



                // Basic form validation
                //if (name.length === 0) {
                //    $(""#name"").addClass(""error-input"");
                //}
                //else if (isNaN(count)) {
                //    $(""#count"").addClass(""error-input"");
                //}
                //else {
                //    $(""#dialog"").hide(250);
                //    console.log(""new event"");
                //    new_event_json(name, count, date, day);
                //    date.setDate(day);
                //    init_calendar(date);

                //}
            });
        }

        // Adds a json event to event_data
        function new_event_json(name, count, da");
                WriteLiteral(@"te, day) {
            var event = {
                ""occasion"": name,
                ""invited_count"": count,
                ""year"": date.getFullYear(),
                ""month"": date.getMonth() + 1,
                ""day"": day
            };
            event_data[""events""].push(event);
        }

        // Display all events of the selected date in card views
        function show_events(events, month, day) {
            // Clear the dates container
            $("".events-container"").empty();
            $("".events-container"").show(250);
            console.log(event_data[""events""]);
            // If there are no events for this date, notify the user
            if (events.length === 0) {
                var event_card = $(""<div class='event-card'></div>"");
                var event_name = $(""<div class='event-name'>There are no events planned for "" + month + "" "" + day + "".</div>"");
                $(event_card).css({ ""border-left"": ""10px solid #FF1744"" });
                $(event_ca");
                WriteLiteral(@"rd).append(event_name);
                $("".events-container"").append(event_card);
            }
            else {
                // Go through and add each event as a card to the events container
                for (var i = 0; i < events.length; i++) {
                    var iddd = events[i][""id""];
                    var event_card = $(""<div class='event-card'></div>"");
                    var event_name = $(""<div id='NameDiv' style='cursor: grab' class='event-name'>Details:</div>"");
                    var event_id = $(""<div id='idDiv' style='display:none' class='event-name'>""+ events[i][""id""]+""</div>"");
                    $(""#NameDiv"").click(function () {
                        //console.log($('#idDiv').html());
                        var id = $('#idDiv').html();
                        window.location.href = ""https://localhost:44352/Appointments/Details/"" + id;
                    });
                    var event_count = $(""<div class='event-count'>"" + events[i][""name""] + ""  Descri");
                WriteLiteral(@"ption ""+events[i][""prescription""] + ""</div>"");
                    if (events[i][""cancelled""] === true) {
                        $(event_card).css({
                            ""border-left"": ""10px solid #FF1744""
                        });
                        event_count = $(""<div class='event-cancelled'>Cancelled</div>"");
                    }
                    $(event_card).append(event_name).append(event_count).append(event_id);
                    $("".events-container"").append(event_card);

                }
            }
        }
        function nameClick(id) {
            alert(id);
        }
        // Checks if a specific date has any events
        function check_events(day, month, year) {
            var events = [];
            for (var i = 0; i < event_data[""events""].length; i++) {
                var event = event_data[""events""][i];
                if (event[""day""] === day &&
                    event[""month""] === month &&
                    event[""year""] === yea");
                WriteLiteral(@"r) {
                    events.push(event);
                }
            }
            return events;
        }

        // Given data for events in JSON format
        //var event_data = {
        //    ""events"": [
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        ");
                WriteLiteral(@"//            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        ");
                WriteLiteral(@"//            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10,
        //            ""cancelled"": true
        //        },
        //        {
        //            ""occasion"": "" Repeated Test Event "",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 10
        //        },
        //        {
        //            ""occasion"": "" Test ");
                WriteLiteral(@"Event"",
        //            ""invited_count"": 120,
        //            ""year"": 2017,
        //            ""month"": 5,
        //            ""day"": 11
        //        }
        //    ]
        //};
        var event_data = {
            ""events"": [

            ]
        };
        //const months = [
        //    ""January"",
        //    ""February"",
        //    ""March"",
        //    ""April"",
        //    ""May"",
        //    ""June"",
        //    ""July"",
        //    ""August"",
        //    ""September"",
        //    ""October"",
        //    ""November"",
        //    ""December""
        //];
        const months = [
            1,
            2,3,4,5,6,7,8,9,10,11,12
        ];
        var data = [];
        function getAllAppointments()
        {
            jQuery.ajaxSettings.traditional = true;

            $.ajax({
                url: """);
#nullable restore
#line 481 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
                 Write(Url.Action("AllAppointments", "Appointments"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                success: function (result) {
                    for (var i = 0; i < result.length; i++) {
                        var event = {
                            ""id"": result[i].id,
                            ""date"": result[i].date,
                            ""status"": result[i].status,
                            ""prescription"": result[i].prescription,
                            ""year"": result[i].year,
                            ""month"": result[i].month,
                            ""day"": result[i].day,
                            ""name"": result[i].name
                        };
                        event_data[""events""].push(event);
                    }
                },
                error: function (err) { alert(err) }
            });
         }
        function getAppointment(month,day)
        {
            jQuery.ajaxSettings.traditional = true;
            event.preventDefault();
            $.ajax({
                data: { month: month, day:day },
   ");
                WriteLiteral("             url: \"");
#nullable restore
#line 506 "C:\Users\AHMD\source\repos\Clinic\Clinic\Views\Appointments\Calendar.cshtml"
                 Write(Url.Action("appointmentsByDate", "Appointments"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                success: function (result) {
                    for (var i = 0; i < result.length; i++) {
                        var event = {
                            ""id"": result[i].id,
                            ""date"": result[i].date,
                            ""status"": result[i].status,
                            ""prescription"": result[i].prescription,
                            ""year"": result[i].year,
                            ""month"": result[i].month,
                            ""day"": result[i].day,
                            ""name"": result[i].name
                        };
                        event_data[""events""].push(event);

                    }
                },
                error: function (err) { alert(err) }
            });
         }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Clinic.Models.Appointment> Html { get; private set; }
    }
}
#pragma warning restore 1591
